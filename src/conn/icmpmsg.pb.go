// Code generated by protoc-gen-go. DO NOT EDIT.
// source: icmpmsg.proto

package conn

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type IcmpMsg_TYPE int32

const (
	IcmpMsg_PONG_PROTO       IcmpMsg_TYPE = 0
	IcmpMsg_PING_PROTO       IcmpMsg_TYPE = 8
	IcmpMsg_CLIENT_SEND_FLAG IcmpMsg_TYPE = 1
	IcmpMsg_SERVER_SEND_FLAG IcmpMsg_TYPE = 2
	IcmpMsg_MAGIC            IcmpMsg_TYPE = 47837
)

var IcmpMsg_TYPE_name = map[int32]string{
	0:     "PONG_PROTO",
	8:     "PING_PROTO",
	1:     "CLIENT_SEND_FLAG",
	2:     "SERVER_SEND_FLAG",
	47837: "MAGIC",
}

var IcmpMsg_TYPE_value = map[string]int32{
	"PONG_PROTO":       0,
	"PING_PROTO":       8,
	"CLIENT_SEND_FLAG": 1,
	"SERVER_SEND_FLAG": 2,
	"MAGIC":            47837,
}

func (x IcmpMsg_TYPE) String() string {
	return proto.EnumName(IcmpMsg_TYPE_name, int32(x))
}

func (IcmpMsg_TYPE) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4f782eb9bee361ea, []int{0, 0}
}

type IcmpMsg struct {
	Id                   string       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Data                 []byte       `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	Magic                IcmpMsg_TYPE `protobuf:"varint,3,opt,name=magic,proto3,enum=IcmpMsg_TYPE" json:"magic,omitempty"`
	Flag                 IcmpMsg_TYPE `protobuf:"varint,4,opt,name=flag,proto3,enum=IcmpMsg_TYPE" json:"flag,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *IcmpMsg) Reset()         { *m = IcmpMsg{} }
func (m *IcmpMsg) String() string { return proto.CompactTextString(m) }
func (*IcmpMsg) ProtoMessage()    {}
func (*IcmpMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f782eb9bee361ea, []int{0}
}

func (m *IcmpMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IcmpMsg.Unmarshal(m, b)
}
func (m *IcmpMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IcmpMsg.Marshal(b, m, deterministic)
}
func (m *IcmpMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IcmpMsg.Merge(m, src)
}
func (m *IcmpMsg) XXX_Size() int {
	return xxx_messageInfo_IcmpMsg.Size(m)
}
func (m *IcmpMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_IcmpMsg.DiscardUnknown(m)
}

var xxx_messageInfo_IcmpMsg proto.InternalMessageInfo

func (m *IcmpMsg) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *IcmpMsg) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *IcmpMsg) GetMagic() IcmpMsg_TYPE {
	if m != nil {
		return m.Magic
	}
	return IcmpMsg_PONG_PROTO
}

func (m *IcmpMsg) GetFlag() IcmpMsg_TYPE {
	if m != nil {
		return m.Flag
	}
	return IcmpMsg_PONG_PROTO
}

func init() {
	proto.RegisterEnum("IcmpMsg_TYPE", IcmpMsg_TYPE_name, IcmpMsg_TYPE_value)
	proto.RegisterType((*IcmpMsg)(nil), "IcmpMsg")
}

func init() { proto.RegisterFile("icmpmsg.proto", fileDescriptor_4f782eb9bee361ea) }

var fileDescriptor_4f782eb9bee361ea = []byte{
	// 213 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xcd, 0x4c, 0xce, 0x2d,
	0xc8, 0x2d, 0x4e, 0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x57, 0xba, 0xc6, 0xc8, 0xc5, 0xee, 0x99,
	0x9c, 0x5b, 0xe0, 0x5b, 0x9c, 0x2e, 0xc4, 0xc7, 0xc5, 0x94, 0x99, 0x22, 0xc1, 0xa8, 0xc0, 0xa8,
	0xc1, 0x19, 0xc4, 0x94, 0x99, 0x22, 0x24, 0xc4, 0xc5, 0x92, 0x92, 0x58, 0x92, 0x28, 0xc1, 0xa4,
	0xc0, 0xa8, 0xc1, 0x13, 0x04, 0x66, 0x0b, 0x29, 0x73, 0xb1, 0xe6, 0x26, 0xa6, 0x67, 0x26, 0x4b,
	0x30, 0x2b, 0x30, 0x6a, 0xf0, 0x19, 0xf1, 0xea, 0x41, 0x35, 0xeb, 0x85, 0x44, 0x06, 0xb8, 0x06,
	0x41, 0xe4, 0x84, 0x14, 0xb9, 0x58, 0xd2, 0x72, 0x12, 0xd3, 0x25, 0x58, 0xb0, 0xa9, 0x01, 0x4b,
	0x29, 0xc5, 0x73, 0xb1, 0x80, 0x78, 0x42, 0x7c, 0x5c, 0x5c, 0x01, 0xfe, 0x7e, 0xee, 0xf1, 0x01,
	0x41, 0xfe, 0x21, 0xfe, 0x02, 0x0c, 0x60, 0xbe, 0x27, 0x9c, 0xcf, 0x21, 0x24, 0xc2, 0x25, 0xe0,
	0xec, 0xe3, 0xe9, 0xea, 0x17, 0x12, 0x1f, 0xec, 0xea, 0xe7, 0x12, 0xef, 0xe6, 0xe3, 0xe8, 0x2e,
	0xc0, 0x08, 0x12, 0x0d, 0x76, 0x0d, 0x0a, 0x73, 0x0d, 0x42, 0x12, 0x65, 0x12, 0xe2, 0xe6, 0x62,
	0xf5, 0x75, 0x74, 0xf7, 0x74, 0x16, 0xb8, 0xfb, 0x95, 0xc9, 0x89, 0x2d, 0x8a, 0x25, 0x39, 0x3f,
	0x2f, 0x2f, 0x89, 0x0d, 0xec, 0x4f, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x0c, 0xb8, 0xfc,
	0x90, 0xf8, 0x00, 0x00, 0x00,
}
